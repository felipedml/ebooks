#!/usr/bin/env node
const { config } = require('dotenv');
const { createClient } = require('@libsql/client');
const path = require('path');

// Load environment variables
config({ path: path.resolve(__dirname, '../.env.local') });

const url = process.env.TURSO_DATABASE_URL || process.env.DATABASE_URL;
const authToken = process.env.TURSO_AUTH_TOKEN || process.env.DATABASE_AUTH_TOKEN;

console.log('üöÄ Removendo coluna master da tabela fluxos...\n');
console.log(`üì¶ URL: ${url}`);
console.log(`üîë Token: ${authToken ? '‚úì Configurado' : '‚úó N√£o configurado'}\n`);

if (!url || !authToken) {
  console.error('‚ùå Erro: Vari√°veis de ambiente n√£o configuradas!');
  process.exit(1);
}

const client = createClient({ url, authToken });

async function removeMasterColumn() {
  try {
    console.log('üìã Verificando estrutura atual da tabela fluxos...');
    
    // Verificar se a coluna master existe
    const tableInfo = await client.execute(`PRAGMA table_info(fluxos)`);
    const hasMaster = tableInfo.rows.some(row => row.name === 'master');
    
    if (!hasMaster) {
      console.log('‚úÖ Coluna master j√° foi removida!');
      return;
    }
    
    console.log('üîß Coluna master encontrada, removendo...\n');
    
    // Desabilitar foreign keys temporariamente
    console.log('üîê Desabilitando foreign keys...');
    await client.execute('PRAGMA foreign_keys = OFF');
    console.log('   ‚úÖ Foreign keys desabilitadas\n');
    
    // Limpar qualquer tabela tempor√°ria residual
    console.log('üßπ Limpando res√≠duos de tentativas anteriores...');
    try {
      await client.execute('DROP TABLE IF EXISTS fluxos_new');
      console.log('   ‚úÖ Limpeza conclu√≠da\n');
    } catch (e) {
      console.log('   ‚ÑπÔ∏è  Nada para limpar\n');
    }
    
    // Executar a migra√ß√£o passo a passo
    console.log('1Ô∏è‚É£ Criando tabela tempor√°ria sem a coluna master...');
    await client.execute(`
      CREATE TABLE fluxos_new (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        descricao TEXT,
        ativo INTEGER DEFAULT 1 NOT NULL,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP NOT NULL,
        updated_at TEXT DEFAULT CURRENT_TIMESTAMP NOT NULL
      )
    `);
    console.log('   ‚úÖ Tabela tempor√°ria criada\n');
    
    console.log('2Ô∏è‚É£ Copiando dados (sem a coluna master)...');
    await client.execute(`
      INSERT INTO fluxos_new (id, nome, descricao, ativo, created_at, updated_at)
      SELECT id, nome, descricao, ativo, created_at, updated_at FROM fluxos
    `);
    console.log('   ‚úÖ Dados copiados\n');
    
    console.log('3Ô∏è‚É£ Removendo tabela antiga...');
    await client.execute('DROP TABLE fluxos');
    console.log('   ‚úÖ Tabela antiga removida\n');
    
    console.log('4Ô∏è‚É£ Renomeando tabela nova...');
    await client.execute('ALTER TABLE fluxos_new RENAME TO fluxos');
    console.log('   ‚úÖ Tabela renomeada\n');
    
    console.log('üîê Reabilitando foreign keys...');
    await client.execute('PRAGMA foreign_keys = ON');
    console.log('   ‚úÖ Foreign keys reabilitadas\n');
    
    // Verificar resultado
    console.log('üîç Verificando estrutura final...');
    const newTableInfo = await client.execute(`PRAGMA table_info(fluxos)`);
    console.log('\nüìã Colunas na tabela fluxos:');
    newTableInfo.rows.forEach(row => {
      console.log(`   ‚úì ${row.name} (${row.type})`);
    });
    
    const stillHasMaster = newTableInfo.rows.some(row => row.name === 'master');
    
    if (stillHasMaster) {
      console.log('\n‚ùå ERRO: Coluna master ainda existe!');
      process.exit(1);
    }
    
    console.log('\n‚úÖ Sucesso! Coluna master foi removida com sucesso!');
    console.log('‚úÖ Sistema agora usa links √∫nicos: /flow/[id]');
    
  } catch (error) {
    console.error('\n‚ùå Erro ao remover coluna master:');
    console.error(error.message);
    process.exit(1);
  } finally {
    client.close();
  }
}

removeMasterColumn();
